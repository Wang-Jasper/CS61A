def paths(m, n):
    """Return the number of paths from one corner of an
    M by N grid to the opposite corner.

    >>> paths(2, 2)
    2
    >>> paths(5, 7)
    210
    >>> paths(117, 1)
    1
    >>> paths(1, 157)
    1
    """
    "*** YOUR CODE HERE ***"
    if m == 1 and n == 1:
        return 1
    elif m - 1 >= 1 and n - 1 >= 1:
        return paths(m - 1, n) + paths(m , n - 1)
    elif m - 1 >= 1:
        return paths(m - 1, n)
    elif n - 1 >= 1:
        return paths(m, n - 1)


def max_product(s):
    """Return the maximum product of non-consecutive elements of s.
     >>> max_product([10, 3, 1, 9, 2]) # 10 * 9
     90
     >>> max_product([5, 10, 5, 10, 5]) # 5 * 5 * 5
     125
     >>> max_product([]) # The product of no numbers is 1
     1
     """
    def products(multi, l):
        if len(l) <= 0:
            return multi
        else:
            return max(products(multi * l[0], l[2:]), products(multi, l[1:]))
    return products(1, s)


def sums(n, m):
    """Return lists that sum to n containing positive numbers up to m that
     have no adjacent repeats.
     >>> sums(5, 1)
     []
     >>> sums(5, 2)
     [[2, 1, 2]]
     >>> sums(5, 3)
     [[1, 3, 1], [2, 1, 2], [2, 3], [3, 2]]
     >>> sums(5, 5)
     [[1, 3, 1], [1, 4], [2, 1, 2], [2, 3], [3, 2], [4, 1], [5]]
     >>> sums(6, 3)
     [[1, 2, 1, 2], [1, 2, 3], [1, 3, 2], [2, 1, 2, 1], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]
     """
    def get_list(previous, l, n):
        result = []
        for i in range(1, m + 1):
            if i != previous:
                if n == i:
                    result +=  [l + [i]]
                elif n - i > 0:
                    result += get_list(i, l + [i], n - i)
        return result
    return get_list(0, [], n)
